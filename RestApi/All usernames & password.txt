1)net login

username:-prathamesh.shirsath
password:-Jd$T3rtYQUDn


2)PUNCH IN/OUT

https://portal.aress.com/
username :- AS3320
password :- Aress123

3)PM TOOL

http://203.193.165.66/Login/Login
Username :- prathamesh.shirsath@aressindia.net
password :- Jd$T3rtYQUDn

4)Zimbra 6766684320532877095 $2a$10$iEl.1oEXMVAXUlp43obnX.uH9pmxvsbtpcnIOOr/j8NR.QKqfasku

https://mail.aress.net/
username :- prathamesh_shirsath
password :- Jd$T3rtYQUDn

5)Lms Login
username :- prathamesh.shirsath
password :- Aress123$

6)Network Authentication - http://192.168.210.1:8090/  
7)External Zimbra - https://mail.aressindia.net        
8)Internal Zimbra- https://mail.aress.net                 
9)Project Management Tool-Login - http://203.193.165.229:90/Login/Login   

https://pythoninstitute.org/python-essentials-1

<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>jstl</artifactId>
		<version>1.2</version>
	</dependency>


sevlet and jsp project:- https://www.javaguides.net/2019/06/jsp-servlet-projects-with-source-code-free-download.html

https://www.youtube.com/watch?v=LCLhXoC1hfM&list=PL8y0jzNQmUDWaXsKX6fjQlWUkW4dM8la5&index=1

https://www.youtube.com/watch?v=H9YuHQdx00s&list=PLuujY-yy8Unb2Ql-eaVBNyqGOVfVgmiS5&index=6







https://www.youtube.com/watch?v=c1MzBXjedFg Rest Api vedio link

package com.example.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.example.model.Employee;
import com.example.model.EmployeeListResponse;

import java.util.List;

@Service
public class EmployeeService {

    private final String apiUrl = "http://dummy.restapiexample.com/api/v1/employees";
   

    @Autowired
    private RestTemplate restTemplate;

    public List<Employee> getAllEmployees() {
        EmployeeListResponse response = restTemplate.getForObject(apiUrl, EmployeeListResponse.class);
        return response.getData();
    }

    public Employee getEmployeeById(Long id) {
        String url = apiUrl + "/" + id;
        return restTemplate.getForObject(url, Employee.class);
    }

    public void addEmployee(Employee employee) {
        restTemplate.postForObject(apiUrl, employee, Employee.class);
    }


    public void updateEmployee(Long id, Employee employee) {
        String url = apiUrl + "/" + id;
        restTemplate.put(url, employee);
    }

    public void deleteEmployee(Long id) {
        String url = apiUrl + "/" + id;
        restTemplate.delete(url);
    }
}


github:- https://github.com/aliyusahaboadam/Admin_User_Registration_Login_Spring_Boot_Application



https://preview.colorlib.com/theme/toothcare/


<div class="form-outline mb-4">
				    <input type="password" id="form1Example2" name="password" placeholder="Enter your Password" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
						title="Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters" class="form-control" required />
			    </div>



I hope this message finds you well. I am writing to recommend my friend, Manali Wagh, for the Technical Support role at [Company Name]. She has recently completed her Bachelor's in Electrical Engineering and is eager to apply her skills to contribute to your team. I have attached her resume for your consideration. Manali is available for an interview at your earliest convenience. Thank you for your time.




https://github.com/mharisraza/ecommerce-storewala-website

https://themewagon.com/themes/template-collection-2022-one-hundred-free-html5-templates-in-one-bundle/

<th>Cart ID</th>
<td th:text="${entry.key.carts[0].cartItemId}"></td>






If I understand correctly, the issue is that when a customer places an order, it reuses a cart_id that was used initially. This is causing a unique constraint violation because the cart_id is supposed to be unique for each order.

To resolve this, you need to ensure that each order has a unique cart_id. One approach is to generate a new cart_id for each order, and this new cart_id should not be reused.

Here are some steps you can take:

Database Sequence/Generation Strategy: If you're using a database sequence or some form of automatic generation strategy for cart_id, ensure that it generates unique values for each order.

Custom Generation Logic: If you are manually setting the cart_id in your code, make sure you have logic to generate a new and unique cart_id for each order. This might involve checking the last used cart_id and incrementing it or using a UUID.

Check for Existing cart_id: Before saving a new order, check if the chosen cart_id already exists in the orderr table. If it does, generate a new and unique cart_id before saving the order.

Without seeing your code, it's challenging to provide a more specific solution. If you can share
the relevant parts of your code where you handle the generation and saving of orders, I can offer more detailed guidance.

- http://bit.ly/3PtOSc5 for UI


'$2a$10$s7KWcBjdHfCQpSqNqlL2COfE5uUa.1hlQIAs6.UQ7W3kULqw56NBS'

$10$p4Okkk1O.uoRJzekd0S58OFaRp2ZZ3k4hdgf.gzn6a0En2qpFm27a

$10$p4Okkk1O.uoRJzekd0S58OFaRp2ZZ3k4hdgf.gzn6a0En2qpFm27a




remove cart option from home page -> done
unique email message -> done
bad cred message change -> done
profile ui change -> done
search -> done
sorting
pagination -> done
edit icon on cart -> done 
edit functionality not working 
download invoice pdf template change -> done
unused icon on seller dashboard -> done
seller dashboard multiselect checkbox on size field -> done
seller image not showing on edit -> done
seller confirm on delete -> done 
admin overview page link on counts 
admin sidebar on each page -> done
seller sidebar on each page -> done
logger
sonar
quantity increase or decrease as per orders -> done



https://www.youtube.com/watch?v=yiRQ2I7Uek0&list=PLBxwSeQlMDNiZU0TstZLivBGbtUmBEBgl

http://192.168.8.1:8090/